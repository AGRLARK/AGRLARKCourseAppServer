// MERN STACK SERVER FOLDER NOTES

Push repository to GitHub:
Step-1: Initialize git init
git init
Step-2: Staged the changes
git add . or git add -A
Step-3: Commit the changes
git commit -m "first trial commit"
Step-4: After creating the GitHub repo in GitHub copy the ssh link and paste here
git remote add origin git@github.com:AGRLARK/AGRLARKCourseAppServer.git
Step-5: push the local code from local to GitHub
git push origin master

Library Used :-
	"bcrypt": Jab hum user ka password db me store karenge tab hume usee Hash karke store karna h 
    "cloudinary": course ke posts / videos wo saare cloudinary par upload honge
    "cookie-parser": req.cookie me se jo hum cookie ko access kar paye
    "cors": Cross-origin Fetching ke lie mtlab: hamara frontend different ip par and humara server different ip par hoga hume usee ek hi api se start kar sakte h
    "datauri": (data uniform resource identifier) 
    "dotenv": .config me jo bhi variable honge usse store karne ke liye
    "express": Express.js, is a back end web application framework for building RESTful APIs with Node.js,
    "jsonwebtoken": login ke liye hume jwt token banana h 
    "mongoose": Mongoose is Object data model(ODM) is used for that simplifies the interaction between MongoDB and Node.js/Express.js applications. (Mongoose MongoDB ke saath Node.js/Express.js applications ke beech ki interaction ko asaan banata hai.)
    "multer": form submit karte waqt jo bhi req.files bhejenege multer ki help se usko access kar sakte h i.e. Block with the help of datauri will take URI to access files or blogs
    "node-cron": e.g. mujhe every monday ek function call karwana h then we can use this node-cron
    "nodemailer": used for mail 
    "razorpay": payment Integration
    "validator": email verify karni h isiliye


//app.js
import express from "express";
import dotenv from "dotenv";

dotenv.config({
  path: "./config/config.env",
});
export const app = express();

-------here in the above we can directly -----
import config as 'config'; import {config} from 'config';

config({
  path: "./config/config.env",
});
---------------dotenv can also be used by -----------
import dotenv from "dotenv";

dotenv.config({
  path: "./config/config.env",
});


//server.js
import { app } from "./app.js";

app.listen(process.env.PORT, () => {
  console.log(`Server is running on  port ${process.env.PORT}`);
});
	
	
	
What is Mongoose?	
Mongoose is an Object Data Modeling (ODM) library for MongoDB and 
Node. js. It manages relationships between data, provides schema 
validation, and is used to translate between objects in code and 
the representation of those objects in MongoDB. MongoDB is a schema-less 
NoSQL document database.

//User.js
const schema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Please Enter your name "],
  },
  email: {
    type: String,
    required: [true, "Please Enter your email"],
    unique: true,
    validate: validator.isEmail,
  },
  password: {
    type: String,
    required: [true, "Please enter your password"],
    minLength: [6, "Password must be atleast of 6 character"],
    select: false,
  },
  role: {
    type: String,
    enum: ["admin", "user"],
    default: "user",
  },
  subscription: {
    id: String,
    status: String,
  },
  avatar: {
    public_id: {
      type: String,
      required: true,
    },
    url: {
      type: String,
      required: true,
    },
  },
  playlist: [
    {
      course: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Course",
      },
      poster: String,
    },
  ],
  createdAt: {
    type: Date,
    default: Date.now(),
  },
  ResetPasswordToken: String,
  ResetPasswordExpire: String,
});

